using Microsoft.AspNetCore.Components;
using SpotifyAPI.Web;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RealShuffle.Pages
{
    public partial class Callback
    {
        public List<SimplePlaylist> PlayLists { get; set; }

        //TODO remove in favor of local storage
        private string authCode;

        private string error;

        protected override async Task OnInitializedAsync()
        {
            var queryString = new Uri(NavManager.Uri).Fragment;
            var queryDictionary = System.Web.HttpUtility.ParseQueryString(queryString);
            authCode = queryDictionary["#access_token"];

            if (authCode is { })
            {
                //TOOD store authCode in local storage\

                var spotify = new SpotifyClient(Globals.DefaultConfig.WithToken(authCode));

                try
                {
                    PlayLists = (await spotify.Playlists.CurrentUsers()).Items;
                } catch (SpotifyAPI.Web.APIException ex)
                {
                    error = $"{ex.Message}: {ex.HelpLink}, {ex.Response.Body}, {ex.Data}";
                }

                StateHasChanged();
            }

            await base.OnInitializedAsync();
        }

        public async void PlaylistClicked(SimplePlaylist playlist)
        {
            var spotify = new SpotifyClient(Globals.DefaultConfig.WithToken(authCode));

            // TODO remove all items from existing playlist

            var createRequest = new PlaylistCreateRequest($"RS_{playlist.Name}")
            {
                Description = $"Playlist generated by RealShuffle based on {playlist.Name} created on {DateTime.UtcNow} UTC",
            };
            var createdPlaylist = await spotify.Playlists.Create((await spotify.UserProfile.Current()).Id, createRequest);

            // Add all items to it randomly

            var fullPlaylist = await spotify.Playlists.Get(playlist.Id);
            var tracks = await spotify.PaginateAll(fullPlaylist.Tracks);
            tracks.Shuffle();

            var trackUris = new List<string>();

            foreach (var item in tracks)
            {
                if (item.Track is FullTrack track)
                {
                    trackUris.Add(track.Uri);
                }
                if (item.Track is FullEpisode episode)
                {
                    trackUris.Add(episode.Uri);
                }
            }

            while(trackUris.Count > 0)
            {
                var addRequest = new PlaylistAddItemsRequest(trackUris.Take(100).ToList());
                await spotify.Playlists.AddItems(createdPlaylist.Id, addRequest);

                trackUris.RemoveRange(0, Math.Min(trackUris.Count, 100));
            }

            NavManager.NavigateTo("/");
        }
    }
}